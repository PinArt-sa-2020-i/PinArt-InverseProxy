upstream api_gateway_node {
      server ${API_GATEWAY_URL};
  }

  server {
      listen 443 ssl;
      ssl_certificate     /etc/ssl/certs/server.crt;
      ssl_certificate_key /etc/ssl/certs/server.key;
      proxy_buffers 64 16k;
      proxy_max_temp_file_size 1024m;
      proxy_connect_timeout 5s;
      proxy_send_timeout 10s;
      proxy_read_timeout 10s;

      location ~ /\. {
           # Simple requests
          if ($request_method ~* "(GET|POST)") {
            add_header "Access-Control-Allow-Origin"  *;
          }

          # Preflighted requests
          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  *;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
            add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
            return 200;
          } 
           add_header "Access-Control-Allow-Origin"  *;

      }

      location ~* ^.+\.(rb|log)$ {
              # Simple requests
                if ($request_method ~* "(GET|POST)") {
                  add_header "Access-Control-Allow-Origin"  *;
                }

                # Preflighted requests
                if ($request_method = OPTIONS ) {
                  add_header "Access-Control-Allow-Origin"  *;
                  add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
                  add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
                  return 200;
                }
                 add_header "Access-Control-Allow-Origin"  *;

      }

      # serve static (compiled) assets directly if they exist (for node production)
      location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/ {
                # Simple requests
                if ($request_method ~* "(GET|POST)") {
                  add_header "Access-Control-Allow-Origin"  *;
                }

                # Preflighted requests
                if ($request_method = OPTIONS ) {
                  add_header "Access-Control-Allow-Origin"  *;
                  add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
                  add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
                  return 200;
                }
            add_header "Access-Control-Allow-Origin"  *;
      
          try_files $uri @api_gateway_node;

          access_log off;
          gzip_static on; # to serve pre-gzipped version

          expires max;
          add_header Cache-Control public;

          # Some browsers still send conditional-GET requests if there's a
          # Last-Modified header or an ETag header even if they haven't
          # reached the expiry date sent in the Expires header.
          add_header Last-Modified "";
          add_header ETag "";
          break;
      }

      location / {
          # Simple requests
          if ($request_method ~* "(GET|POST)") {
            add_header "Access-Control-Allow-Origin"  *;
          }

          # Preflighted requests
          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  *;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
            add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
            return 200;
          }
       add_header "Access-Control-Allow-Origin"  *;
          try_files $uri $uri/ @api_gateway_node;
      }

      location @api_gateway_node {
            add_header "Access-Control-Allow-Origin"  *;
          # Simple requests
          if ($request_method ~* "(GET|POST)") {
            add_header "Access-Control-Allow-Origin"  *;
          }

          # Preflighted requests
          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  *;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
            add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
            return 200;
          }
            add_header "Access-Control-Allow-Origin"  *;
      
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_redirect off;
          proxy_pass http://${API_GATEWAY_URL};
          access_log /var/www/api-gateway/log/nginx.access.log;
          error_log /var/www/api-gateway/log/nginx.error.log;
      }
  }
